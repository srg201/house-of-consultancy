version: "3"

services:
  DB:
    container_name: DB
    platform: linux/amd64
    restart: unless-stopped
    image: postgres:latest
    environment:
      - POSTGRES_USER=strapi
      - POSTGRES_PASSWORD=strapi
      - POSTGRES_DB=strapi
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U strapi"]
      interval: 5s
      timeout: 5s
      retries: 5

  cms:
    container_name: strapi
    build:
      context: ./cms
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    env_file: ./cms/.env
    ports:
      - "1337:1337"
    volumes:
      - ./cms/public/uploads:/app/public/uploads
      - strapi_logs:/app/logs
    networks:
      - app-network
    depends_on:
      DB:
        condition: service_healthy
    command: sh -c "npm start 2>&1 | tee /app/logs/strapi.log"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:1337
      - API_URL=http://cms:1337
    volumes:
      - strapi_logs:/strapi_logs:ro
    networks:
      - app-network
    depends_on:
      cms:
        condition: service_started
    entrypoint: >
      /bin/sh -c "
        apk add --no-cache grep &&
        echo 'Waiting for Strapi to start...' &&
        until grep -q 'Strapi started successfully' /strapi_logs/strapi.log 2>/dev/null; do
          echo 'Waiting for Strapi to initialize...'
          sleep 2
        done &&
        echo 'Strapi is fully started - starting Next.js' && npm run build && npm start"

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - cms
      - frontend
    networks:
      - app-network

volumes:
  strapi_logs:
  postgres_data:

networks:
  app-network:
    name: app-network
    driver: bridge
